#!/usr/bin/env python3

import os
import re
import sys
import subprocess

version_regex = re.compile(r"^v?([0-9]+)\.([0-9]+)\.([0-9]+)(?:-(?P<prerel>[a-z]+\.[0-9]+))?(?:-(?P<commit>[0-9]+-g[a-f0-9]{7}))?(?P<dirty>-d)?$")

if len(sys.argv) != 3:
	print("Usage:", sys.argv[0], "[output_dir] [fallback_version]")
	exit(1)

path_cpp = os.path.join(sys.argv[1], "Version.cpp")
path_txt = os.path.join(sys.argv[1], "Version.txt")

if os.path.exists(".git"):
	process = subprocess.Popen(["git", "describe", "--tags", "--abbrev=7", "--dirty=-d"], stdout=subprocess.PIPE)
	raw_version, _ = process.communicate()

	if process.returncode != 0:
		print("Error: git exited with code {0}".format(process.returncode))
		exit(1)

	raw_version = raw_version.decode().strip()
else:
	raw_version = sys.argv[2]

match = re.fullmatch(version_regex, raw_version)

if match == None:
	print("Error: Invalid version:", raw_version)
	exit(1)

if os.path.exists(path_txt):
	with open(path_txt, "r") as file_handle:
		stored_version = file_handle.read()
else:
	stored_version = ""

match_dict = match.groupdict(default="")

version_major = int(match.group(1))
version_minor = int(match.group(2))
version_patch = int(match.group(3))
version_prerel = match_dict["prerel"]
version_commit = match_dict["commit"].replace("-g", ".")
version_dirty = match_dict["dirty"][1:]

version = "{0}.{1}.{2}".format(version_major, version_minor, version_patch)
version_int = (version_major << 24) | (version_minor << 16) | version_patch

if len(version_prerel):
	version += "-" + version_prerel

if len(version_commit):
	version += "+" + version_commit

	if len(version_dirty):
		version += ".d"
elif len(version_dirty):
	version += "+d"

if version != stored_version:
	with open(path_cpp, "w") as file_handle:
		file_handle.write("// autogenerated file, do not edit\n")
		file_handle.write("#include <Version.hpp>\n\n")
		file_handle.write("const char *ZBNT_VERSION = \"" + version + "\";\n")
		file_handle.write("const uint32_t ZBNT_VERSION_INT = {0};\n".format(version_int))
		file_handle.write("const uint32_t ZBNT_VERSION_MAJOR = {0};\n".format(version_major))
		file_handle.write("const uint32_t ZBNT_VERSION_MINOR = {0};\n".format(version_minor))
		file_handle.write("const uint32_t ZBNT_VERSION_PATCH = {0};\n".format(version_patch))
		file_handle.write("const char *ZBNT_VERSION_PREREL = \"" + version_prerel + "\";\n")
		file_handle.write("const char *ZBNT_VERSION_COMMIT = \"" + version_commit + "\";\n")
		file_handle.write("const bool ZBNT_VERSION_DIRTY = " + ("true" if len(version_dirty) else "false") + ";\n")

	with open(path_txt, "w") as file_handle:
		file_handle.write(version)
